{"file":"C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\users\\users.component.spec.ts","mappings":";;AAAA,mDAAmF;AAEnF,uDAAmD;AACnD,oDAAgD;AAChD,oEAA6E;AAC7E,uDAA6D;AAC7D,+BAA0B;AAG1B,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,SAAyB,CAAC;IAC9B,IAAI,OAAyC,CAAC;IAE9C,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,YAAY,EAAE,CAAC,gCAAc,EAAE,8BAAkB,CAAC;YAClD,OAAO,EAAE,EAAE;YACX,SAAS,EAAE;gBACT,EAAC,OAAO,EAAE,4BAAY,EAAE,QAAQ,EAAE,oCAAe,EAAC;aACnD;SACF,CAAC,CAAC;QACH,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,gCAAc,CAAC,CAAC;QAClD,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACtC,OAAO,CAAC,aAAa,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACvB,MAAM,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,IAAA,mBAAS,EAAC,GAAG,EAAE;QACxC,MAAM,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,gCAAc,CAAC,CAAC;QACxD,MAAM,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,4BAAY,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAa;YACvB;gBACE,MAAM,EAAE,CAAC;gBACT,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,QAAQ;gBACnB,QAAQ,EAAE,QAAQ;gBAClB,KAAK,EAAE,QAAQ;gBACf,KAAK,EAAE,UAAU;gBACjB,MAAM,EAAE,QAAQ;gBAChB,IAAI,EAAE,CAAC;aACR;YACD;gBACE,MAAM,EAAE,CAAC;gBACT,QAAQ,EAAE,SAAS;gBACnB,QAAQ,EAAE,SAAS;gBACnB,SAAS,EAAE,SAAS;gBACpB,QAAQ,EAAE,SAAS;gBACnB,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,UAAU;gBACjB,MAAM,EAAE,SAAS;gBACjB,IAAI,EAAE,CAAC;aACR;SACF,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,eAAe,CAAC,IAAA,SAAE,EAAC,MAAM,CAAC,CAAC,CAAC;QAClF,MAAM,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC;QAC5C,SAAS,CAAC,WAAW,EAAE,CAAC;QACxB,IAAA,cAAI,GAAE,CAAC;QACP,OAAO,CAAC,aAAa,EAAE,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\users\\users.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\r\n\r\nimport { UsersComponent } from './users.component';\r\nimport { UsersService } from '../users.service';\r\nimport { userServiceMock, usersResponse } from '../mocks/users.service.mock';\r\nimport { AccordionComponent } from 'ngx-bootstrap/accordion';\r\nimport { of } from 'rxjs';\r\nimport { User } from '../models/user';\r\n\r\ndescribe('UsersComponent', () => {\r\n  let component: UsersComponent;\r\n  let fixture: ComponentFixture<UsersComponent>;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [UsersComponent, AccordionComponent],\r\n      imports: [],\r\n      providers: [\r\n        {provide: UsersService, useClass: userServiceMock}\r\n      ]\r\n    });\r\n    fixture = TestBed.createComponent(UsersComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should get all users', fakeAsync(() => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const service = TestBed.inject(UsersService);\r\n    const result: User[] =   [\r\n      {\r\n        idUser: 1,\r\n        userName: \"prueba\",\r\n        password: \"prueba\",\r\n        firstName: \"prueba\",\r\n        lastName: \"prueba\",\r\n        email: \"prueba\",\r\n        phone: \"00000000\",\r\n        adress: \"prueba\",\r\n        type: 0\r\n      },\r\n      {\r\n        idUser: 2,\r\n        userName: \"prueba2\",\r\n        password: \"prueba2\",\r\n        firstName: \"prueba2\",\r\n        lastName: \"prueba2\",\r\n        email: \"prueba2\",\r\n        phone: \"11111111\",\r\n        adress: \"prueba2\",\r\n        type: 1\r\n      }\r\n    ];\r\n    const spyGetUser = jest.spyOn(service, \"getAllUsers\").mockReturnValue(of(result));\r\n    const component = fixture.componentInstance;\r\n    component.getAllUsers();\r\n    tick();\r\n    fixture.detectChanges();\r\n    expect(component.list[0]?.userName).toEqual(\"prueba\");\r\n  }));\r\n});\r\n"],"version":3}