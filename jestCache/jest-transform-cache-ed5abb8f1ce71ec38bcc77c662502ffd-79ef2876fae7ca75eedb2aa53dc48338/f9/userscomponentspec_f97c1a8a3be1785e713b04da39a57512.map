{"file":"C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\users\\users.component.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\users\\users.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, fakeAsync, tick} from '@angular/core/testing';\r\n\r\nimport { UsersComponent } from './users.component';\r\nimport { UsersService } from '../users.service';\r\nimport { userServiceMock, usersResponse } from '../mocks/users.service.mock';\r\nimport { AccordionComponent } from 'ngx-bootstrap/accordion';\r\nimport { of } from 'rxjs';\r\nimport { User } from '../models/user';\r\n\r\ndescribe('UsersComponent', () => {\r\n  let component: UsersComponent;\r\n  let fixture: ComponentFixture<UsersComponent>;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [UsersComponent, AccordionComponent],\r\n      imports: [],\r\n      providers: [\r\n        {provide: UsersService, useClass: userServiceMock}\r\n      ]\r\n    });\r\n    fixture = TestBed.createComponent(UsersComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should get all users', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const service = TestBed.inject(UsersService);\r\n    const result: any[] =   [\r\n      {\r\n        id_usuario: 1,\r\n        nombre_usuario: \"prueba\",\r\n        contraseña: \"prueba\",\r\n        nombre: \"prueba\",\r\n        apellido: \"prueba\",\r\n        email: \"prueba\",\r\n        telefono: \"00000000\",\r\n        direccion: \"prueba\",\r\n        tipo_usuario: 0\r\n      },\r\n      {\r\n        id_usuario: 2,\r\n        nombre_usuario: \"prueba2\",\r\n        contraseña: \"prueba2\",\r\n        nombre: \"prueba2\",\r\n        apellido: \"prueba2\",\r\n        email: \"prueba2\",\r\n        telefono: \"11111111\",\r\n        direccion: \"prueba2\",\r\n        tipo_usuario: 1\r\n      }\r\n    ];\r\n    const spyGetUser = jest.spyOn(service, \"getAllUsers\").mockReturnValue(of(result));\r\n    const component = fixture.componentInstance;\r\n    component.getAllUsers();\r\n    expect(component.list.length).toBeGreaterThan(0)\r\n    expect(component.list[0]?.userName).toBeDefined();\r\n  });\r\n\r\n  it('should get only clients', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const service = TestBed.inject(UsersService);\r\n    const result: any[] =   [\r\n      {\r\n        id_usuario: 1,\r\n        nombre_usuario: \"cliente\",\r\n        contraseña: \"cliente\",\r\n        nombre: \"cliente\",\r\n        apellido: \"cliente\",\r\n        email: \"cliente\",\r\n        telefono: \"00000000\",\r\n        direccion: \"cliente\",\r\n        tipo_usuario: 0 // 0 es el numero correspondiente a los clientes\r\n      }\r\n    ];\r\n    const spyGetUser = jest.spyOn(service, \"getAllUsers\").mockReturnValue(of(result));\r\n    const component = fixture.componentInstance;\r\n    component.getAllClients();\r\n    expect(component.list.length).toBeGreaterThan(0);\r\n    expect(component.list[0]?.type).toEqual(0);\r\n  });\r\n\r\n  it('should get only employees', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const service = TestBed.inject(UsersService);\r\n    const result: any[] =   [\r\n      {\r\n        id_usuario: 1,\r\n        nombre_usuario: \"empleado\",\r\n        contraseña: \"empleado\",\r\n        nombre: \"empleado\",\r\n        apellido: \"empleado\",\r\n        email: \"empleado\",\r\n        telefono: \"11111111\",\r\n        direccion: \"empleado\",\r\n        tipo_usuario: 1 // 1 es el numero correspondiente a los empleados\r\n      }\r\n    ];\r\n    const spyGetUser = jest.spyOn(service, \"getAllUsers\").mockReturnValue(of(result));\r\n    const component = fixture.componentInstance;\r\n    component.getAllEmployees();\r\n    expect(component.list.length).toBeGreaterThan(0);\r\n    expect(component.list[0]?.type).toEqual(1);\r\n  });\r\n\r\n  it('should set showClientsFlag to true', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const component = fixture.componentInstance;\r\n    component.showOnlyClients();\r\n    fixture.detectChanges();\r\n    expect(component.showClientsFlag).toEqual(true) ;\r\n    expect(component.showEmployeesFlag).toEqual(false);\r\n  });\r\n\r\n  it('should set showClientsFlag to false', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const component = fixture.componentInstance;\r\n    component.showClientsFlag = true;\r\n    component.showOnlyClients();\r\n    fixture.detectChanges();\r\n    expect(component.showClientsFlag).toEqual(false) ;\r\n  });\r\n\r\n  it('should set showEmployeesFlag to true', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const component = fixture.componentInstance;\r\n    component.showOnlyEmployees();\r\n    fixture.detectChanges();\r\n    expect(component.showEmployeesFlag).toEqual(true);\r\n    expect(component.showClientsFlag).toEqual(false);\r\n  });\r\n\r\n  it('should set showEmployeesFlag to false', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const component = fixture.componentInstance;\r\n    component.showEmployeesFlag = true;\r\n    component.showOnlyEmployees();\r\n    fixture.detectChanges();\r\n    expect(component.showEmployeesFlag).toEqual(false);\r\n  });\r\n\r\n  it('should allow to edit a user', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const component = fixture.componentInstance;\r\n    const userToEditMock: User = {userName: \"prueba\", password: \"prueba\", \r\n      email: \"prueba\", phone: \"prueba\", firstName: \"prueba\", lastName: \"prueba\",\r\n      adress: \"prueba\", idUser: 1, type: 1}\r\n    component.allowEditing(userToEditMock);\r\n    expect(component.edit).toEqual(true);\r\n    expect(component.userForm.controls.username).toBeDefined();\r\n    expect(component.userForm.enabled).toEqual(true);\r\n  });\r\n\r\n  it('should delete a user', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const service = TestBed.inject(UsersService);\r\n    const userToDelete: User = new User(-1, \"prueba\", \"prueba\", \"prueba\", \"prueba\", \"prueba 123\", \"00000000\", 1, \"prueba@gmail.com\");\r\n    const component = fixture.componentInstance;\r\n    component.list.push(userToDelete);\r\n    component.deleteUser(userToDelete);\r\n    setTimeout(() => component.ngOnInit(), 500);\r\n    expect(component.list.find(user => user.idUser === -1)).toBeUndefined();\r\n  });\r\n\r\n  it('should edit a user', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const service = TestBed.inject(UsersService);\r\n    const component = fixture.componentInstance;\r\n    const userToEdit: User = new User(-1, \"prueba\", \"prueba\", \"prueba\", \"prueba\", \"prueba 123\", \"00000000\", 1, \"prueba@gmail.com\");\r\n    component.allowEditing(userToEdit);\r\n    component.userForm.controls.username.setValue(\"modificado\");\r\n    component.editUser();\r\n    expect(component.lastEditedUser?.userName).toEqual(\"modificado\");\r\n  });\r\n\r\n  it('should create a user', () => {\r\n    const fixture = TestBed.createComponent(UsersComponent);\r\n    const service = TestBed.inject(UsersService);\r\n    const component = fixture.componentInstance;\r\n    component.userForm.patchValue({username: \"prueba\", password: \"prueba\", email: \"prueba\", phoneNumber: \"00000000\", firstName: \"prueba\", lastName: \"prueba\", address: \"prueba 123\", userType: \"1\"});\r\n    component.addUser();\r\n    expect(component.lastUserAdded?.userName).toEqual(\"prueba\");\r\n  });\r\n});\r\n"],"version":3}