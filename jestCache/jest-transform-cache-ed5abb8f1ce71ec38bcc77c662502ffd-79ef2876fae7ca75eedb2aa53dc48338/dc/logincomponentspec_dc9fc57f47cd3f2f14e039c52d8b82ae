cb7de17724f360f33335cfc7995718aa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms"); // Import the ReactiveFormsModule
const log_in_component_1 = require("./log-in.component");
const log_in_service_1 = require("../log-in.service");
const logInService_mock_1 = require("../mocks/logInService.mock");
const rxjs_1 = require("rxjs");
describe('LogInComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [log_in_component_1.LogInComponent],
            imports: [forms_1.ReactiveFormsModule],
            providers: [
                { provide: log_in_service_1.LogInService, useClass: logInService_mock_1.LogInServiceMock },
            ],
        }).compileComponents();
        fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
    it('should get one user', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const service = testing_1.TestBed.inject(log_in_service_1.LogInService);
        const result = {
            token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxMjMxMjMiLCJpYXQiOjE3MDI2NDQ3NTYsImV4cCI6MTcwMjY0NTM1Nn0.PrN2IoCzK0MaK4OqbgND6UxYK_vHxUdOClVxYBPXgwI",
            user: {
                idUser: 1,
                userName: "prueba",
                password: "prueba",
                email: "prueba@gmail.com",
                phone: "00000000",
                firstName: "prueba",
                lastName: "prueba",
                adress: "prueba 123",
                type: 0
            }
        };
        const spyGetUser = jest.spyOn(service, "getOne").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getOneEmployee();
        fixture.detectChanges();
        expect(component.user.userName).toEqual("prueba");
        expect(component.user.password).toEqual("prueba");
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVc3VhcmlvXFxyZXBvcyhEZXNhcnJvbGxvKVxcVFAtZHN3LWZyb250XFxzcmNcXGFwcFxcbG9nLWluXFxsb2ctaW4uY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBa0U7QUFDbEUsMENBQXFELENBQUMsaUNBQWlDO0FBRXZGLHlEQUFvRDtBQUNwRCxzREFBaUQ7QUFDakQsa0VBQXdGO0FBQ3hGLCtCQUEwQjtBQUUxQixRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksU0FBeUIsQ0FBQztJQUM5QixJQUFJLE9BQXlDLENBQUM7SUFFOUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsWUFBWSxFQUFFLENBQUMsaUNBQWMsQ0FBQztZQUM5QixPQUFPLEVBQUUsQ0FBQywyQkFBbUIsQ0FBQztZQUM5QixTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsNkJBQVksRUFBRSxRQUFRLEVBQUUsb0NBQWdCLEVBQUU7YUFDdEQ7U0FDRixDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2QixPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsaUNBQWMsQ0FBQyxDQUFDO1FBQ2xELFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDdEMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDdkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtRQUMzQixNQUFNLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxpQ0FBYyxDQUFDLENBQUM7UUFDeEQsTUFBTSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsNkJBQVksQ0FBQyxDQUFDO1FBQzdDLE1BQU0sTUFBTSxHQUE2QjtZQUN2QyxLQUFLLEVBQUUsc0xBQXNMO1lBQzdMLElBQUksRUFBRTtnQkFDSixNQUFNLEVBQUUsQ0FBQztnQkFDVCxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLEtBQUssRUFBRSxrQkFBa0I7Z0JBQ3pCLEtBQUssRUFBRSxVQUFVO2dCQUNqQixTQUFTLEVBQUUsUUFBUTtnQkFDbkIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixJQUFJLEVBQUUsQ0FBQzthQUNSO1NBQ0YsQ0FBQztRQUNKLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFBLFNBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUM1QyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDM0IsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQ3ZCLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDbkQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVzdWFyaW9cXHJlcG9zKERlc2Fycm9sbG8pXFxUUC1kc3ctZnJvbnRcXHNyY1xcYXBwXFxsb2ctaW5cXGxvZy1pbi5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcclxuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJzsgLy8gSW1wb3J0IHRoZSBSZWFjdGl2ZUZvcm1zTW9kdWxlXHJcblxyXG5pbXBvcnQgeyBMb2dJbkNvbXBvbmVudCB9IGZyb20gJy4vbG9nLWluLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvZ0luU2VydmljZSB9IGZyb20gJy4uL2xvZy1pbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nSW5TZXJ2aWNlTW9jaywgTG9nSW5TZXJ2aWNlUmVzcG9uc2VNb2NrIH0gZnJvbSAnLi4vbW9ja3MvbG9nSW5TZXJ2aWNlLm1vY2snO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuZGVzY3JpYmUoJ0xvZ0luQ29tcG9uZW50JywgKCkgPT4ge1xyXG4gIGxldCBjb21wb25lbnQ6IExvZ0luQ29tcG9uZW50O1xyXG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPExvZ0luQ29tcG9uZW50PjtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xyXG4gICAgICBkZWNsYXJhdGlvbnM6IFtMb2dJbkNvbXBvbmVudF0sXHJcbiAgICAgIGltcG9ydHM6IFtSZWFjdGl2ZUZvcm1zTW9kdWxlXSwgXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHsgcHJvdmlkZTogTG9nSW5TZXJ2aWNlLCB1c2VDbGFzczogTG9nSW5TZXJ2aWNlTW9jayB9LFxyXG4gICAgICBdLFxyXG4gICAgfSkuY29tcGlsZUNvbXBvbmVudHMoKTtcclxuICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChMb2dJbkNvbXBvbmVudCk7XHJcbiAgICBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgY3JlYXRlJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudCkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGdldCBvbmUgdXNlcicsICgpID0+IHtcclxuICAgICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KExvZ0luQ29tcG9uZW50KTtcclxuICAgICAgY29uc3Qgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KExvZ0luU2VydmljZSk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdDogTG9nSW5TZXJ2aWNlUmVzcG9uc2VNb2NrID0ge1xyXG4gICAgICAgIHRva2VuOiBcImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUoxYzJWeVRtRnRaU0k2SW1Ga2JXbHVJaXdpY0dGemMzZHZjbVFpT2lJeE1qTXhNak1pTENKcFlYUWlPakUzTURJMk5EUTNOVFlzSW1WNGNDSTZNVGN3TWpZME5UTTFObjAuUHJOMklvQ3pLME1hSzRPcWJnTkQ2VXhZS192SHhVZE9DbFZ4WUJQWGd3SVwiLFxyXG4gICAgICAgIHVzZXI6IHtcclxuICAgICAgICAgIGlkVXNlcjogMSxcclxuICAgICAgICAgIHVzZXJOYW1lOiBcInBydWViYVwiLFxyXG4gICAgICAgICAgcGFzc3dvcmQ6IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgICBlbWFpbDogXCJwcnVlYmFAZ21haWwuY29tXCIsXHJcbiAgICAgICAgICBwaG9uZTogXCIwMDAwMDAwMFwiLFxyXG4gICAgICAgICAgZmlyc3ROYW1lOiBcInBydWViYVwiLFxyXG4gICAgICAgICAgbGFzdE5hbWU6IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgICBhZHJlc3M6IFwicHJ1ZWJhIDEyM1wiLFxyXG4gICAgICAgICAgdHlwZTogMFxyXG4gICAgICAgIH0gXHJcbiAgICAgIH07XHJcbiAgICBjb25zdCBzcHlHZXRVc2VyID0gamVzdC5zcHlPbihzZXJ2aWNlLCBcImdldE9uZVwiKS5tb2NrUmV0dXJuVmFsdWUob2YocmVzdWx0KSk7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgY29tcG9uZW50LmdldE9uZUVtcGxveWVlKCk7XHJcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKVxyXG4gICAgZXhwZWN0KGNvbXBvbmVudC51c2VyLnVzZXJOYW1lKS50b0VxdWFsKFwicHJ1ZWJhXCIpO1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC51c2VyLnBhc3N3b3JkKS50b0VxdWFsKFwicHJ1ZWJhXCIpXHJcbiAgfSk7XHJcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==