{
  "version": 3,
  "sources": ["C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\node_modules\\@angular\\common\\fesm2022\\testing.mjs"],
  "sourcesContent": ["/**\n * @license Angular v16.2.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nimport { LocationStrategy, Location } from '@angular/common';\nimport { Subject } from 'rxjs';\n\n/**\n * Joins two parts of a URL with a slash if needed.\n *\n * @param start  URL string\n * @param end    URL string\n *\n *\n * @returns The joined URL string.\n */\nfunction joinWithSlash(start, end) {\n    if (start.length == 0) {\n        return end;\n    }\n    if (end.length == 0) {\n        return start;\n    }\n    let slashes = 0;\n    if (start.endsWith('/')) {\n        slashes++;\n    }\n    if (end.startsWith('/')) {\n        slashes++;\n    }\n    if (slashes == 2) {\n        return start + end.substring(1);\n    }\n    if (slashes == 1) {\n        return start + end;\n    }\n    return start + '/' + end;\n}\n/**\n * Removes a trailing slash from a URL string if needed.\n * Looks for the first occurrence of either `#`, `?`, or the end of the\n * line as `/` characters and removes the trailing slash if one exists.\n *\n * @param url URL string.\n *\n * @returns The URL string, modified if needed.\n */\nfunction stripTrailingSlash(url) {\n    const match = url.match(/#|\\?|$/);\n    const pathEndIdx = match && match.index || url.length;\n    const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n    return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n}\n/**\n * Normalizes URL parameters by prepending with `?` if needed.\n *\n * @param  params String of URL parameters.\n *\n * @returns The normalized URL parameters string.\n */\nfunction normalizeQueryParams(params) {\n    return params && params[0] !== '?' ? '?' + params : params;\n}\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\nclass SpyLocation {\n    constructor() {\n        this.urlChanges = [];\n        this._history = [new LocationState('', '', null)];\n        this._historyIndex = 0;\n        /** @internal */\n        this._subject = new EventEmitter();\n        /** @internal */\n        this._basePath = '';\n        /** @internal */\n        this._locationStrategy = null;\n        /** @internal */\n        this._urlChangeListeners = [];\n        /** @internal */\n        this._urlChangeSubscription = null;\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this._urlChangeSubscription?.unsubscribe();\n        this._urlChangeListeners = [];\n    }\n    setInitialPath(url) {\n        this._history[this._historyIndex].path = url;\n    }\n    setBaseHref(url) {\n        this._basePath = url;\n    }\n    path() {\n        return this._history[this._historyIndex].path;\n    }\n    getState() {\n        return this._history[this._historyIndex].state;\n    }\n    isCurrentPathEqualTo(path, query = '') {\n        const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n        const currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n        return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');\n    }\n    simulateUrlPop(pathname) {\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\n    }\n    simulateHashChange(pathname) {\n        const path = this.prepareExternalUrl(pathname);\n        this.pushHistory(path, '', null);\n        this.urlChanges.push('hash: ' + pathname);\n        // the browser will automatically fire popstate event before each `hashchange` event, so we need\n        // to simulate it.\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });\n    }\n    prepareExternalUrl(url) {\n        if (url.length > 0 && !url.startsWith('/')) {\n            url = '/' + url;\n        }\n        return this._basePath + url;\n    }\n    go(path, query = '', state = null) {\n        path = this.prepareExternalUrl(path);\n        this.pushHistory(path, query, state);\n        const locationState = this._history[this._historyIndex - 1];\n        if (locationState.path == path && locationState.query == query) {\n            return;\n        }\n        const url = path + (query.length > 0 ? ('?' + query) : '');\n        this.urlChanges.push(url);\n        this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\n    }\n    replaceState(path, query = '', state = null) {\n        path = this.prepareExternalUrl(path);\n        const history = this._history[this._historyIndex];\n        history.state = state;\n        if (history.path == path && history.query == query) {\n            return;\n        }\n        history.path = path;\n        history.query = query;\n        const url = path + (query.length > 0 ? ('?' + query) : '');\n        this.urlChanges.push('replace: ' + url);\n        this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\n    }\n    forward() {\n        if (this._historyIndex < (this._history.length - 1)) {\n            this._historyIndex++;\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true, 'type': 'popstate' });\n        }\n    }\n    back() {\n        if (this._historyIndex > 0) {\n            this._historyIndex--;\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true, 'type': 'popstate' });\n        }\n    }\n    historyGo(relativePosition = 0) {\n        const nextPageIndex = this._historyIndex + relativePosition;\n        if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {\n            this._historyIndex = nextPageIndex;\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true, 'type': 'popstate' });\n        }\n    }\n    onUrlChange(fn) {\n        this._urlChangeListeners.push(fn);\n        if (!this._urlChangeSubscription) {\n            this._urlChangeSubscription = this.subscribe(v => {\n                this._notifyUrlChangeListeners(v.url, v.state);\n            });\n        }\n        return () => {\n            const fnIndex = this._urlChangeListeners.indexOf(fn);\n            this._urlChangeListeners.splice(fnIndex, 1);\n            if (this._urlChangeListeners.length === 0) {\n                this._urlChangeSubscription?.unsubscribe();\n                this._urlChangeSubscription = null;\n            }\n        };\n    }\n    /** @internal */\n    _notifyUrlChangeListeners(url = '', state) {\n        this._urlChangeListeners.forEach(fn => fn(url, state));\n    }\n    subscribe(onNext, onThrow, onReturn) {\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n    }\n    normalize(url) {\n        return null;\n    }\n    pushHistory(path, query, state) {\n        if (this._historyIndex > 0) {\n            this._history.splice(this._historyIndex + 1);\n        }\n        this._history.push(new LocationState(path, query, state));\n        this._historyIndex = this._history.length - 1;\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.0\", ngImport: i0, type: SpyLocation, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.0\", ngImport: i0, type: SpyLocation }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.0\", ngImport: i0, type: SpyLocation, decorators: [{\n            type: Injectable\n        }] });\nclass LocationState {\n    constructor(path, query, state) {\n        this.path = path;\n        this.query = query;\n        this.state = state;\n    }\n}\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\nclass MockLocationStrategy extends LocationStrategy {\n    constructor() {\n        super();\n        this.internalBaseHref = '/';\n        this.internalPath = '/';\n        this.internalTitle = '';\n        this.urlChanges = [];\n        /** @internal */\n        this._subject = new EventEmitter();\n        this.stateChanges = [];\n    }\n    simulatePopState(url) {\n        this.internalPath = url;\n        this._subject.emit(new _MockPopStateEvent(this.path()));\n    }\n    path(includeHash = false) {\n        return this.internalPath;\n    }\n    prepareExternalUrl(internal) {\n        if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n            return this.internalBaseHref + internal.substring(1);\n        }\n        return this.internalBaseHref + internal;\n    }\n    pushState(ctx, title, path, query) {\n        // Add state change to changes array\n        this.stateChanges.push(ctx);\n        this.internalTitle = title;\n        const url = path + (query.length > 0 ? ('?' + query) : '');\n        this.internalPath = url;\n        const externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push(externalUrl);\n    }\n    replaceState(ctx, title, path, query) {\n        // Reset the last index of stateChanges to the ctx (state) object\n        this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n        this.internalTitle = title;\n        const url = path + (query.length > 0 ? ('?' + query) : '');\n        this.internalPath = url;\n        const externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push('replace: ' + externalUrl);\n    }\n    onPopState(fn) {\n        this._subject.subscribe({ next: fn });\n    }\n    getBaseHref() {\n        return this.internalBaseHref;\n    }\n    back() {\n        if (this.urlChanges.length > 0) {\n            this.urlChanges.pop();\n            this.stateChanges.pop();\n            const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n            this.simulatePopState(nextUrl);\n        }\n    }\n    forward() {\n        throw 'not implemented';\n    }\n    getState() {\n        return this.stateChanges[(this.stateChanges.length || 1) - 1];\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.0\", ngImport: i0, type: MockLocationStrategy, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.0\", ngImport: i0, type: MockLocationStrategy }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.0\", ngImport: i0, type: MockLocationStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\nclass _MockPopStateEvent {\n    constructor(newUrl) {\n        this.newUrl = newUrl;\n        this.pop = true;\n        this.type = 'popstate';\n    }\n}\n\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\nfunction parseUrl(urlStr, baseHref) {\n    const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n    let serverBase;\n    // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n    // an arbitrary base URL which can be removed afterward.\n    if (!verifyProtocol.test(urlStr)) {\n        serverBase = 'http://empty.com/';\n    }\n    let parsedUrl;\n    try {\n        parsedUrl = new URL(urlStr, serverBase);\n    }\n    catch (e) {\n        const result = urlParse.exec(serverBase || '' + urlStr);\n        if (!result) {\n            throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n        }\n        const hostSplit = result[4].split(':');\n        parsedUrl = {\n            protocol: result[1],\n            hostname: hostSplit[0],\n            port: hostSplit[1] || '',\n            pathname: result[5],\n            search: result[6],\n            hash: result[8],\n        };\n    }\n    if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n        parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n    }\n    return {\n        hostname: !serverBase && parsedUrl.hostname || '',\n        protocol: !serverBase && parsedUrl.protocol || '',\n        port: !serverBase && parsedUrl.port || '',\n        pathname: parsedUrl.pathname || '/',\n        search: parsedUrl.search || '',\n        hash: parsedUrl.hash || '',\n    };\n}\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nconst MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\nclass MockPlatformLocation {\n    constructor(config) {\n        this.baseHref = '';\n        this.hashUpdate = new Subject();\n        this.popStateSubject = new Subject();\n        this.urlChangeIndex = 0;\n        this.urlChanges = [{ hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null }];\n        if (config) {\n            this.baseHref = config.appBaseHref || '';\n            const parsedChanges = this.parseChanges(null, config.startUrl || 'http://_empty_/', this.baseHref);\n            this.urlChanges[0] = { ...parsedChanges };\n        }\n    }\n    get hostname() {\n        return this.urlChanges[this.urlChangeIndex].hostname;\n    }\n    get protocol() {\n        return this.urlChanges[this.urlChangeIndex].protocol;\n    }\n    get port() {\n        return this.urlChanges[this.urlChangeIndex].port;\n    }\n    get pathname() {\n        return this.urlChanges[this.urlChangeIndex].pathname;\n    }\n    get search() {\n        return this.urlChanges[this.urlChangeIndex].search;\n    }\n    get hash() {\n        return this.urlChanges[this.urlChangeIndex].hash;\n    }\n    get state() {\n        return this.urlChanges[this.urlChangeIndex].state;\n    }\n    getBaseHrefFromDOM() {\n        return this.baseHref;\n    }\n    onPopState(fn) {\n        const subscription = this.popStateSubject.subscribe(fn);\n        return () => subscription.unsubscribe();\n    }\n    onHashChange(fn) {\n        const subscription = this.hashUpdate.subscribe(fn);\n        return () => subscription.unsubscribe();\n    }\n    get href() {\n        let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n        url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n        return url;\n    }\n    get url() {\n        return `${this.pathname}${this.search}${this.hash}`;\n    }\n    parseChanges(state, url, baseHref = '') {\n        // When the `history.state` value is stored, it is always copied.\n        state = JSON.parse(JSON.stringify(state));\n        return { ...parseUrl(url, baseHref), state };\n    }\n    replaceState(state, title, newUrl) {\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\n        this.urlChanges[this.urlChangeIndex] =\n            { ...this.urlChanges[this.urlChangeIndex], pathname, search, hash, state: parsedState };\n    }\n    pushState(state, title, newUrl) {\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\n        if (this.urlChangeIndex > 0) {\n            this.urlChanges.splice(this.urlChangeIndex + 1);\n        }\n        this.urlChanges.push({ ...this.urlChanges[this.urlChangeIndex], pathname, search, hash, state: parsedState });\n        this.urlChangeIndex = this.urlChanges.length - 1;\n    }\n    forward() {\n        const oldUrl = this.url;\n        const oldHash = this.hash;\n        if (this.urlChangeIndex < this.urlChanges.length) {\n            this.urlChangeIndex++;\n        }\n        this.emitEvents(oldHash, oldUrl);\n    }\n    back() {\n        const oldUrl = this.url;\n        const oldHash = this.hash;\n        if (this.urlChangeIndex > 0) {\n            this.urlChangeIndex--;\n        }\n        this.emitEvents(oldHash, oldUrl);\n    }\n    historyGo(relativePosition = 0) {\n        const oldUrl = this.url;\n        const oldHash = this.hash;\n        const nextPageIndex = this.urlChangeIndex + relativePosition;\n        if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {\n            this.urlChangeIndex = nextPageIndex;\n        }\n        this.emitEvents(oldHash, oldUrl);\n    }\n    getState() {\n        return this.state;\n    }\n    /**\n     * Browsers are inconsistent in when they fire events and perform the state updates\n     * The most easiest thing to do in our mock is synchronous and that happens to match\n     * Firefox and Chrome, at least somewhat closely\n     *\n     * https://github.com/WICG/navigation-api#watching-for-navigations\n     * https://docs.google.com/document/d/1Pdve-DJ1JCGilj9Yqf5HxRJyBKSel5owgOvUJqTauwU/edit#heading=h.3ye4v71wsz94\n     * popstate is always sent before hashchange:\n     * https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n     */\n    emitEvents(oldHash, oldUrl) {\n        this.popStateSubject.next({ type: 'popstate', state: this.getState(), oldUrl, newUrl: this.url });\n        if (oldHash !== this.hash) {\n            this.hashUpdate.next({ type: 'hashchange', state: null, oldUrl, newUrl: this.url });\n        }\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.0\", ngImport: i0, type: MockPlatformLocation, deps: [{ token: MOCK_PLATFORM_LOCATION_CONFIG, optional: true }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.0\", ngImport: i0, type: MockPlatformLocation }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.0\", ngImport: i0, type: MockPlatformLocation, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MOCK_PLATFORM_LOCATION_CONFIG]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * Returns mock providers for the `Location` and `LocationStrategy` classes.\n * The mocks are helpful in tests to fire simulated location events.\n *\n * @publicApi\n */\nfunction provideLocationMocks() {\n    return [\n        { provide: Location, useClass: SpyLocation },\n        { provide: LocationStrategy, useClass: MockLocationStrategy },\n    ];\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common/testing package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation, provideLocationMocks };\n//# sourceMappingURL=testing.mjs.map\n"],
  "mappings": "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",
  "names": []
}
