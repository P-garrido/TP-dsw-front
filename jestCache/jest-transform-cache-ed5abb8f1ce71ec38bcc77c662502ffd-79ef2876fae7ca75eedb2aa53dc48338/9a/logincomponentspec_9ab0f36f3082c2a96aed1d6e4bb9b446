714cbe0074cad85d80af6eb9e036eb53
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const forms_1 = require("@angular/forms"); // Import the ReactiveFormsModule
const log_in_component_1 = require("./log-in.component");
const log_in_service_1 = require("../log-in.service");
const logInService_mock_1 = require("../mocks/logInService.mock");
const rxjs_1 = require("rxjs");
const testing_2 = require("@angular/router/testing");
describe('LogInComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [log_in_component_1.LogInComponent],
            imports: [forms_1.ReactiveFormsModule, testing_2.RouterTestingModule],
            providers: [
                { provide: log_in_service_1.LogInService, useClass: logInService_mock_1.LogInServiceMock },
            ],
        }).compileComponents();
        fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
    it('should get one user', (0, testing_1.fakeAsync)(() => {
        const service = testing_1.TestBed.inject(log_in_service_1.LogInService);
        const result = {
            token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxMjMxMjMiLCJpYXQiOjE3MDI2NDQ3NTYsImV4cCI6MTcwMjY0NTM1Nn0.PrN2IoCzK0MaK4OqbgND6UxYK_vHxUdOClVxYBPXgwI",
            user: {
                idUser: 1,
                userName: "prueba",
                password: "prueba",
                email: "prueba@gmail.com",
                phone: "00000000",
                firstName: "prueba",
                lastName: "prueba",
                adress: "prueba 123",
                type: 0
            }
        };
        const spyGetUser = jest.spyOn(service, "getOne").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getOneEmployee();
        // Use tick to simulate the passage of time until all asynchronous operations are completed
        (0, testing_1.tick)();
        // Detect changes after the tick to ensure the component is updated
        fixture.detectChanges();
        const navigateSpy = spyOn(component.getRouter(), 'navigate');
        expect(navigateSpy).toHaveBeenCalledWith(['/inicio']);
        expect(component.user?.userName).toEqual("prueba");
        expect(component.user?.password).toEqual("prueba");
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVc3VhcmlvXFxyZXBvcyhEZXNhcnJvbGxvKVxcVFAtZHN3LWZyb250XFxzcmNcXGFwcFxcbG9nLWluXFxsb2ctaW4uY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBa0Y7QUFDbEYsMENBQXFELENBQUMsaUNBQWlDO0FBRXZGLHlEQUFvRDtBQUNwRCxzREFBaUQ7QUFDakQsa0VBQXdGO0FBQ3hGLCtCQUEwQjtBQUMxQixxREFBOEQ7QUFFOUQsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLFNBQXlCLENBQUM7SUFDOUIsSUFBSSxPQUF5QyxDQUFDO0lBRTlDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLFlBQVksRUFBRSxDQUFDLGlDQUFjLENBQUM7WUFDOUIsT0FBTyxFQUFFLENBQUMsMkJBQW1CLEVBQUUsNkJBQW1CLENBQUM7WUFDbkQsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLDZCQUFZLEVBQUUsUUFBUSxFQUFFLG9DQUFnQixFQUFFO2FBQ3REO1NBQ0YsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkIsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGlDQUFjLENBQUMsQ0FBQztRQUNsRCxTQUFTLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQ3RDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxJQUFBLG1CQUFTLEVBQUMsR0FBRyxFQUFFO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLDZCQUFZLENBQUMsQ0FBQztRQUMvQyxNQUFNLE1BQU0sR0FBNkI7WUFDdkMsS0FBSyxFQUFFLHNMQUFzTDtZQUM3TCxJQUFJLEVBQUU7Z0JBQ0osTUFBTSxFQUFFLENBQUM7Z0JBQ1QsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixLQUFLLEVBQUUsa0JBQWtCO2dCQUN6QixLQUFLLEVBQUUsVUFBVTtnQkFDakIsU0FBUyxFQUFFLFFBQVE7Z0JBQ25CLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsSUFBSSxFQUFFLENBQUM7YUFDUjtTQUNGLENBQUM7UUFDRixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBQSxTQUFFLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUM3RSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFFNUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRTNCLDJGQUEyRjtRQUMzRixJQUFBLGNBQUksR0FBRSxDQUFDO1FBRVAsbUVBQW1FO1FBQ25FLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVc3VhcmlvXFxyZXBvcyhEZXNhcnJvbGxvKVxcVFAtZHN3LWZyb250XFxzcmNcXGFwcFxcbG9nLWluXFxsb2ctaW4uY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCwgZmFrZUFzeW5jLCB0aWNrfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnOyAvLyBJbXBvcnQgdGhlIFJlYWN0aXZlRm9ybXNNb2R1bGVcclxuXHJcbmltcG9ydCB7IExvZ0luQ29tcG9uZW50IH0gZnJvbSAnLi9sb2ctaW4uY29tcG9uZW50JztcclxuaW1wb3J0IHsgTG9nSW5TZXJ2aWNlIH0gZnJvbSAnLi4vbG9nLWluLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2dJblNlcnZpY2VNb2NrLCBMb2dJblNlcnZpY2VSZXNwb25zZU1vY2sgfSBmcm9tICcuLi9tb2Nrcy9sb2dJblNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFJvdXRlclRlc3RpbmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXIvdGVzdGluZyc7XHJcblxyXG5kZXNjcmliZSgnTG9nSW5Db21wb25lbnQnLCAoKSA9PiB7XHJcbiAgbGV0IGNvbXBvbmVudDogTG9nSW5Db21wb25lbnQ7XHJcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8TG9nSW5Db21wb25lbnQ+O1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGRlY2xhcmF0aW9uczogW0xvZ0luQ29tcG9uZW50XSxcclxuICAgICAgaW1wb3J0czogW1JlYWN0aXZlRm9ybXNNb2R1bGUsIFJvdXRlclRlc3RpbmdNb2R1bGVdLCBcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgeyBwcm92aWRlOiBMb2dJblNlcnZpY2UsIHVzZUNsYXNzOiBMb2dJblNlcnZpY2VNb2NrIH0sXHJcbiAgICAgIF0sXHJcbiAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xyXG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KExvZ0luQ29tcG9uZW50KTtcclxuICAgIGNvbXBvbmVudCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QoY29tcG9uZW50KS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgZ2V0IG9uZSB1c2VyJywgZmFrZUFzeW5jKCgpID0+IHtcclxuICAgICAgY29uc3Qgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KExvZ0luU2VydmljZSk7XHJcbiAgICBjb25zdCByZXN1bHQ6IExvZ0luU2VydmljZVJlc3BvbnNlTW9jayA9IHtcclxuICAgICAgdG9rZW46IFwiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SjFjMlZ5VG1GdFpTSTZJbUZrYldsdUlpd2ljR0Z6YzNkdmNtUWlPaUl4TWpNeE1qTWlMQ0pwWVhRaU9qRTNNREkyTkRRM05UWXNJbVY0Y0NJNk1UY3dNalkwTlRNMU5uMC5Qck4ySW9DekswTWFLNE9xYmdORDZVeFlLX3ZIeFVkT0NsVnhZQlBYZ3dJXCIsXHJcbiAgICAgIHVzZXI6IHtcclxuICAgICAgICBpZFVzZXI6IDEsXHJcbiAgICAgICAgdXNlck5hbWU6IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgcGFzc3dvcmQ6IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgZW1haWw6IFwicHJ1ZWJhQGdtYWlsLmNvbVwiLFxyXG4gICAgICAgIHBob25lOiBcIjAwMDAwMDAwXCIsXHJcbiAgICAgICAgZmlyc3ROYW1lOiBcInBydWViYVwiLFxyXG4gICAgICAgIGxhc3ROYW1lOiBcInBydWViYVwiLFxyXG4gICAgICAgIGFkcmVzczogXCJwcnVlYmEgMTIzXCIsXHJcbiAgICAgICAgdHlwZTogMFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc3B5R2V0VXNlciA9IGplc3Quc3B5T24oc2VydmljZSwgXCJnZXRPbmVcIikubW9ja1JldHVyblZhbHVlKG9mKHJlc3VsdCkpO1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcclxuXHJcbiAgICBjb21wb25lbnQuZ2V0T25lRW1wbG95ZWUoKTtcclxuXHJcbiAgICAvLyBVc2UgdGljayB0byBzaW11bGF0ZSB0aGUgcGFzc2FnZSBvZiB0aW1lIHVudGlsIGFsbCBhc3luY2hyb25vdXMgb3BlcmF0aW9ucyBhcmUgY29tcGxldGVkXHJcbiAgICB0aWNrKCk7XHJcblxyXG4gICAgLy8gRGV0ZWN0IGNoYW5nZXMgYWZ0ZXIgdGhlIHRpY2sgdG8gZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgdXBkYXRlZFxyXG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICBjb25zdCBuYXZpZ2F0ZVNweSA9IHNweU9uKGNvbXBvbmVudC5nZXRSb3V0ZXIoKSwgJ25hdmlnYXRlJyk7XHJcbiAgICBleHBlY3QobmF2aWdhdGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnL2luaWNpbyddKTtcclxuICAgIGV4cGVjdChjb21wb25lbnQudXNlcj8udXNlck5hbWUpLnRvRXF1YWwoXCJwcnVlYmFcIik7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LnVzZXI/LnBhc3N3b3JkKS50b0VxdWFsKFwicHJ1ZWJhXCIpO1xyXG4gIH0pKTtcclxufSk7Il0sInZlcnNpb24iOjN9