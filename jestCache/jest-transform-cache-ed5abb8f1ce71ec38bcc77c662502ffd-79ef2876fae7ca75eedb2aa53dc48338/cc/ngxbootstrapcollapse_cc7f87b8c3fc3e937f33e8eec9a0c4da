ca8ec9e0040fe0224c3d27d048d318fd
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ngx_bootstrap_collapse_exports = {};
__export(ngx_bootstrap_collapse_exports, {
  CollapseDirective: () => CollapseDirective,
  CollapseModule: () => CollapseModule
});
module.exports = __toCommonJS(ngx_bootstrap_collapse_exports);
var i1 = __toESM(require("@angular/animations"), 1);
var import_animations = require("@angular/animations");
var i0 = __toESM(require("@angular/core"), 1);
var import_core = require("@angular/core");
const COLLAPSE_ANIMATION_TIMING = "400ms cubic-bezier(0.4,0.0,0.2,1)";
const expandAnimation = [
  (0, import_animations.style)({ height: 0, visibility: "hidden" }),
  (0, import_animations.animate)(COLLAPSE_ANIMATION_TIMING, (0, import_animations.style)({ height: "*", visibility: "visible" }))
];
const collapseAnimation = [
  (0, import_animations.style)({ height: "*", visibility: "visible" }),
  (0, import_animations.animate)(COLLAPSE_ANIMATION_TIMING, (0, import_animations.style)({ height: 0, visibility: "hidden" }))
];
const _CollapseDirective = class _CollapseDirective {
  set display(value) {
    this._display = value;
    if (value === "none") {
      this.hide();
      return;
    }
    this.isAnimated ? this.toggle() : this.show();
  }
  /** A flag indicating visibility of content (shown or hidden) */
  set collapse(value) {
    this.collapseNewValue = value;
    if (!this._player || this._isAnimationDone) {
      this.isExpanded = value;
      this.toggle();
    }
  }
  get collapse() {
    return this.isExpanded;
  }
  constructor(_el, _renderer, _builder) {
    this._el = _el;
    this._renderer = _renderer;
    this.collapsed = new import_core.EventEmitter();
    this.collapses = new import_core.EventEmitter();
    this.expanded = new import_core.EventEmitter();
    this.expands = new import_core.EventEmitter();
    this.isExpanded = true;
    this.collapseNewValue = true;
    this.isCollapsed = false;
    this.isCollapse = true;
    this.isCollapsing = false;
    this.isAnimated = false;
    this._display = "block";
    this._stylesLoaded = false;
    this._COLLAPSE_ACTION_NAME = "collapse";
    this._EXPAND_ACTION_NAME = "expand";
    this._factoryCollapseAnimation = _builder.build(collapseAnimation);
    this._factoryExpandAnimation = _builder.build(expandAnimation);
  }
  ngAfterViewChecked() {
    this._stylesLoaded = true;
    if (!this._player || !this._isAnimationDone) {
      return;
    }
    this._player.reset();
    this._renderer.setStyle(this._el.nativeElement, "height", "*");
  }
  /** allows to manually toggle content visibility */
  toggle() {
    if (this.isExpanded) {
      this.hide();
    } else {
      this.show();
    }
  }
  /** allows to manually hide content */
  hide() {
    this.isCollapsing = true;
    this.isExpanded = false;
    this.isCollapsed = true;
    this.isCollapsing = false;
    this.collapses.emit(this);
    this._isAnimationDone = false;
    this.animationRun(this.isAnimated, this._COLLAPSE_ACTION_NAME)(() => {
      this._isAnimationDone = true;
      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {
        this.show();
        return;
      }
      this.collapsed.emit(this);
      this._renderer.setStyle(this._el.nativeElement, "display", "none");
    });
  }
  /** allows to manually show collapsed content */
  show() {
    this._renderer.setStyle(this._el.nativeElement, "display", this._display);
    this.isCollapsing = true;
    this.isExpanded = true;
    this.isCollapsed = false;
    this.isCollapsing = false;
    this.expands.emit(this);
    this._isAnimationDone = false;
    this.animationRun(this.isAnimated, this._EXPAND_ACTION_NAME)(() => {
      this._isAnimationDone = true;
      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {
        this.hide();
        return;
      }
      this.expanded.emit(this);
      this._renderer.removeStyle(this._el.nativeElement, "overflow");
    });
  }
  animationRun(isAnimated, action) {
    if (!isAnimated || !this._stylesLoaded) {
      return (callback) => callback();
    }
    this._renderer.setStyle(this._el.nativeElement, "overflow", "hidden");
    this._renderer.addClass(this._el.nativeElement, "collapse");
    const factoryAnimation = action === this._EXPAND_ACTION_NAME ? this._factoryExpandAnimation : this._factoryCollapseAnimation;
    if (this._player) {
      this._player.reset();
    }
    this._player = factoryAnimation.create(this._el.nativeElement);
    this._player.play();
    return (callback) => {
      var _a;
      return (_a = this._player) == null ? void 0 : _a.onDone(callback);
    };
  }
};
_CollapseDirective.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: _CollapseDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.AnimationBuilder }], target: i0.\u0275\u0275FactoryTarget.Directive });
_CollapseDirective.\u0275dir = i0.\u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: _CollapseDirective, selector: "[collapse]", inputs: { display: "display", isAnimated: "isAnimated", collapse: "collapse" }, outputs: { collapsed: "collapsed", collapses: "collapses", expanded: "expanded", expands: "expands" }, host: { properties: { "class.collapse": "this.isCollapse", "class.in": "this.isExpanded", "class.show": "this.isExpanded", "attr.aria-hidden": "this.isCollapsed", "class.collapsing": "this.isCollapsing" } }, exportAs: ["bs-collapse"], ngImport: i0 });
let CollapseDirective = _CollapseDirective;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: CollapseDirective, decorators: [{
  type: import_core.Directive,
  args: [{
    selector: "[collapse]",
    exportAs: "bs-collapse",
    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
    host: {
      "[class.collapse]": "true"
    }
  }]
}], ctorParameters: function() {
  return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.AnimationBuilder }];
}, propDecorators: { collapsed: [{
  type: import_core.Output
}], collapses: [{
  type: import_core.Output
}], expanded: [{
  type: import_core.Output
}], expands: [{
  type: import_core.Output
}], isExpanded: [{
  type: import_core.HostBinding,
  args: ["class.in"]
}, {
  type: import_core.HostBinding,
  args: ["class.show"]
}], isCollapsed: [{
  type: import_core.HostBinding,
  args: ["attr.aria-hidden"]
}], isCollapse: [{
  type: import_core.HostBinding,
  args: ["class.collapse"]
}], isCollapsing: [{
  type: import_core.HostBinding,
  args: ["class.collapsing"]
}], display: [{
  type: import_core.Input
}], isAnimated: [{
  type: import_core.Input
}], collapse: [{
  type: import_core.Input
}] } });
const _CollapseModule = class _CollapseModule {
  static forRoot() {
    return { ngModule: _CollapseModule, providers: [] };
  }
};
_CollapseModule.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: _CollapseModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule });
_CollapseModule.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.4", ngImport: i0, type: _CollapseModule, declarations: [CollapseDirective], exports: [CollapseDirective] });
_CollapseModule.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: _CollapseModule });
let CollapseModule = _CollapseModule;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: CollapseModule, decorators: [{
  type: import_core.NgModule,
  args: [{
    declarations: [CollapseDirective],
    exports: [CollapseDirective]
  }]
}] });
