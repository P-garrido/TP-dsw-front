f3d8cee9aa0529c0d964df73b7d47039
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const users_component_1 = require("./users.component");
const users_service_1 = require("../users.service");
const users_service_mock_1 = require("../mocks/users.service.mock");
const accordion_1 = require("ngx-bootstrap/accordion");
const rxjs_1 = require("rxjs");
describe('UsersComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [users_component_1.UsersComponent, accordion_1.AccordionComponent],
            imports: [],
            providers: [
                { provide: users_service_1.UsersService, useClass: users_service_mock_1.userServiceMock }
            ]
        });
        fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
    it('should get all users', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const result = [
            {
                id_usuario: 1,
                nombre_usuario: "prueba",
                contraseña: "prueba",
                nombre: "prueba",
                apellido: "prueba",
                email: "prueba",
                telefono: "00000000",
                direccion: "prueba",
                tipo_usuario: 0
            },
            {
                id_usuario: 2,
                nombre_usuario: "prueba2",
                contraseña: "prueba2",
                nombre: "prueba2",
                apellido: "prueba2",
                email: "prueba2",
                telefono: "11111111",
                direccion: "prueba2",
                tipo_usuario: 1
            }
        ];
        const spyGetUser = jest.spyOn(service, "getAllUsers").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getAllUsers();
        console.log(component.list);
        expect(component.list.length).toBeGreaterThan(0);
        expect(component.list[0]?.userName).toBeDefined();
    });
    it('should get only clients', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const result = [
            {
                id_usuario: 1,
                nombre_usuario: "cliente",
                contraseña: "cliente",
                nombre: "cliente",
                apellido: "cliente",
                email: "cliente",
                telefono: "00000000",
                direccion: "cliente",
                tipo_usuario: 0 // 0 es el numero correspondiente a los clientes
            }
        ];
        const spyGetUser = jest.spyOn(service, "getAllUsers").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getAllClients();
        expect(component.list[0]?.type).toEqual(0);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVc3VhcmlvXFxyZXBvcyhEZXNhcnJvbGxvKVxcVFAtZHN3LWZyb250XFxzcmNcXGFwcFxcdXNlcnNcXHVzZXJzLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWtFO0FBRWxFLHVEQUFtRDtBQUNuRCxvREFBZ0Q7QUFDaEQsb0VBQTZFO0FBQzdFLHVEQUE2RDtBQUM3RCwrQkFBMEI7QUFHMUIsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLFNBQXlCLENBQUM7SUFDOUIsSUFBSSxPQUF5QyxDQUFDO0lBRTlDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLFlBQVksRUFBRSxDQUFDLGdDQUFjLEVBQUUsOEJBQWtCLENBQUM7WUFDbEQsT0FBTyxFQUFFLEVBQUU7WUFDWCxTQUFTLEVBQUU7Z0JBQ1QsRUFBQyxPQUFPLEVBQUUsNEJBQVksRUFBRSxRQUFRLEVBQUUsb0NBQWUsRUFBQzthQUNuRDtTQUNGLENBQUMsQ0FBQztRQUNILE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxnQ0FBYyxDQUFDLENBQUM7UUFDbEQsU0FBUyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUN0QyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtRQUN2QixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQzlCLE1BQU0sT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGdDQUFjLENBQUMsQ0FBQztRQUN4RCxNQUFNLE9BQU8sR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyw0QkFBWSxDQUFDLENBQUM7UUFDN0MsTUFBTSxNQUFNLEdBQVk7WUFDdEI7Z0JBQ0UsVUFBVSxFQUFFLENBQUM7Z0JBQ2IsY0FBYyxFQUFFLFFBQVE7Z0JBQ3hCLFVBQVUsRUFBRSxRQUFRO2dCQUNwQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLEtBQUssRUFBRSxRQUFRO2dCQUNmLFFBQVEsRUFBRSxVQUFVO2dCQUNwQixTQUFTLEVBQUUsUUFBUTtnQkFDbkIsWUFBWSxFQUFFLENBQUM7YUFDaEI7WUFDRDtnQkFDRSxVQUFVLEVBQUUsQ0FBQztnQkFDYixjQUFjLEVBQUUsU0FBUztnQkFDekIsVUFBVSxFQUFFLFNBQVM7Z0JBQ3JCLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixRQUFRLEVBQUUsU0FBUztnQkFDbkIsS0FBSyxFQUFFLFNBQVM7Z0JBQ2hCLFFBQVEsRUFBRSxVQUFVO2dCQUNwQixTQUFTLEVBQUUsU0FBUztnQkFDcEIsWUFBWSxFQUFFLENBQUM7YUFDaEI7U0FDRixDQUFDO1FBQ0YsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUMsZUFBZSxDQUFDLElBQUEsU0FBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbEYsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQzVDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDaEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGdDQUFjLENBQUMsQ0FBQztRQUN4RCxNQUFNLE9BQU8sR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyw0QkFBWSxDQUFDLENBQUM7UUFDN0MsTUFBTSxNQUFNLEdBQVk7WUFDdEI7Z0JBQ0UsVUFBVSxFQUFFLENBQUM7Z0JBQ2IsY0FBYyxFQUFFLFNBQVM7Z0JBQ3pCLFVBQVUsRUFBRSxTQUFTO2dCQUNyQixNQUFNLEVBQUUsU0FBUztnQkFDakIsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLEtBQUssRUFBRSxTQUFTO2dCQUNoQixRQUFRLEVBQUUsVUFBVTtnQkFDcEIsU0FBUyxFQUFFLFNBQVM7Z0JBQ3BCLFlBQVksRUFBRSxDQUFDLENBQUMsZ0RBQWdEO2FBQ2pFO1NBQ0YsQ0FBQztRQUNGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFBLFNBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUM1QyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDMUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVc3VhcmlvXFxyZXBvcyhEZXNhcnJvbGxvKVxcVFAtZHN3LWZyb250XFxzcmNcXGFwcFxcdXNlcnNcXHVzZXJzLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5cclxuaW1wb3J0IHsgVXNlcnNDb21wb25lbnQgfSBmcm9tICcuL3VzZXJzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFVzZXJzU2VydmljZSB9IGZyb20gJy4uL3VzZXJzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyB1c2VyU2VydmljZU1vY2ssIHVzZXJzUmVzcG9uc2UgfSBmcm9tICcuLi9tb2Nrcy91c2Vycy5zZXJ2aWNlLm1vY2snO1xyXG5pbXBvcnQgeyBBY2NvcmRpb25Db21wb25lbnQgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2FjY29yZGlvbic7XHJcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9tb2RlbHMvdXNlcic7XHJcblxyXG5kZXNjcmliZSgnVXNlcnNDb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgbGV0IGNvbXBvbmVudDogVXNlcnNDb21wb25lbnQ7XHJcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8VXNlcnNDb21wb25lbnQ+O1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGRlY2xhcmF0aW9uczogW1VzZXJzQ29tcG9uZW50LCBBY2NvcmRpb25Db21wb25lbnRdLFxyXG4gICAgICBpbXBvcnRzOiBbXSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAge3Byb3ZpZGU6IFVzZXJzU2VydmljZSwgdXNlQ2xhc3M6IHVzZXJTZXJ2aWNlTW9ja31cclxuICAgICAgXVxyXG4gICAgfSk7XHJcbiAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoVXNlcnNDb21wb25lbnQpO1xyXG4gICAgY29tcG9uZW50ID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcclxuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGNyZWF0ZScsICgpID0+IHtcclxuICAgIGV4cGVjdChjb21wb25lbnQpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBnZXQgYWxsIHVzZXJzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFVzZXJzQ29tcG9uZW50KTtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBUZXN0QmVkLmluamVjdChVc2Vyc1NlcnZpY2UpO1xyXG4gICAgY29uc3QgcmVzdWx0OiBhbnlbXSA9ICAgW1xyXG4gICAgICB7XHJcbiAgICAgICAgaWRfdXN1YXJpbzogMSxcclxuICAgICAgICBub21icmVfdXN1YXJpbzogXCJwcnVlYmFcIixcclxuICAgICAgICBjb250cmFzZcOxYTogXCJwcnVlYmFcIixcclxuICAgICAgICBub21icmU6IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgYXBlbGxpZG86IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgZW1haWw6IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgdGVsZWZvbm86IFwiMDAwMDAwMDBcIixcclxuICAgICAgICBkaXJlY2Npb246IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgdGlwb191c3VhcmlvOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpZF91c3VhcmlvOiAyLFxyXG4gICAgICAgIG5vbWJyZV91c3VhcmlvOiBcInBydWViYTJcIixcclxuICAgICAgICBjb250cmFzZcOxYTogXCJwcnVlYmEyXCIsXHJcbiAgICAgICAgbm9tYnJlOiBcInBydWViYTJcIixcclxuICAgICAgICBhcGVsbGlkbzogXCJwcnVlYmEyXCIsXHJcbiAgICAgICAgZW1haWw6IFwicHJ1ZWJhMlwiLFxyXG4gICAgICAgIHRlbGVmb25vOiBcIjExMTExMTExXCIsXHJcbiAgICAgICAgZGlyZWNjaW9uOiBcInBydWViYTJcIixcclxuICAgICAgICB0aXBvX3VzdWFyaW86IDFcclxuICAgICAgfVxyXG4gICAgXTtcclxuICAgIGNvbnN0IHNweUdldFVzZXIgPSBqZXN0LnNweU9uKHNlcnZpY2UsIFwiZ2V0QWxsVXNlcnNcIikubW9ja1JldHVyblZhbHVlKG9mKHJlc3VsdCkpO1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcclxuICAgIGNvbXBvbmVudC5nZXRBbGxVc2VycygpO1xyXG4gICAgY29uc29sZS5sb2coY29tcG9uZW50Lmxpc3QpXHJcbiAgICBleHBlY3QoY29tcG9uZW50Lmxpc3QubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMClcclxuICAgIGV4cGVjdChjb21wb25lbnQubGlzdFswXT8udXNlck5hbWUpLnRvQmVEZWZpbmVkKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgZ2V0IG9ubHkgY2xpZW50cycsICgpID0+IHtcclxuICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChVc2Vyc0NvbXBvbmVudCk7XHJcbiAgICBjb25zdCBzZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoVXNlcnNTZXJ2aWNlKTtcclxuICAgIGNvbnN0IHJlc3VsdDogYW55W10gPSAgIFtcclxuICAgICAge1xyXG4gICAgICAgIGlkX3VzdWFyaW86IDEsXHJcbiAgICAgICAgbm9tYnJlX3VzdWFyaW86IFwiY2xpZW50ZVwiLFxyXG4gICAgICAgIGNvbnRyYXNlw7FhOiBcImNsaWVudGVcIixcclxuICAgICAgICBub21icmU6IFwiY2xpZW50ZVwiLFxyXG4gICAgICAgIGFwZWxsaWRvOiBcImNsaWVudGVcIixcclxuICAgICAgICBlbWFpbDogXCJjbGllbnRlXCIsXHJcbiAgICAgICAgdGVsZWZvbm86IFwiMDAwMDAwMDBcIixcclxuICAgICAgICBkaXJlY2Npb246IFwiY2xpZW50ZVwiLFxyXG4gICAgICAgIHRpcG9fdXN1YXJpbzogMCAvLyAwIGVzIGVsIG51bWVybyBjb3JyZXNwb25kaWVudGUgYSBsb3MgY2xpZW50ZXNcclxuICAgICAgfVxyXG4gICAgXTtcclxuICAgIGNvbnN0IHNweUdldFVzZXIgPSBqZXN0LnNweU9uKHNlcnZpY2UsIFwiZ2V0QWxsVXNlcnNcIikubW9ja1JldHVyblZhbHVlKG9mKHJlc3VsdCkpO1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcclxuICAgIGNvbXBvbmVudC5nZXRBbGxDbGllbnRzKCk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50Lmxpc3RbMF0/LnR5cGUpLnRvRXF1YWwoMCk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=