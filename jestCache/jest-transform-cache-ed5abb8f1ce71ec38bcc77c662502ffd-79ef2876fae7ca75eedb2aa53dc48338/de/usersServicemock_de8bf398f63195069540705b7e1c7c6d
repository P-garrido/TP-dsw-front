fcd90b05da58a35491494a97174c7ec8
"use strict";

/* istanbul ignore next */
function cov_71df2r5et() {
  var path = "C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\users\\mocks\\usersService.mock.ts";
  var hash = "1d9be2a8846d1ff3b828b898263c5902424b24be";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\users\\mocks\\usersService.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 21
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 20
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 14
          },
          end: {
            line: 7,
            column: 17
          }
        },
        line: 7
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 14
          },
          end: {
            line: 8,
            column: 17
          }
        },
        line: 8
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 9,
            column: 18
          }
        },
        line: 9
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {},
    inputSourceMap: {
      file: "C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\users\\mocks\\usersService.mock.ts",
      mappings: ";;;AAAA,MAAa,gBAAgB;IAE3B,WAAW,KAAW,CAAC;IAEvB,UAAU,KAAW,CAAC;IAEtB,OAAO,KAAW,CAAC;IAEnB,OAAO,KAAU,CAAC;IAElB,QAAQ,KAAU,CAAC;CACpB;AAXD,4CAWC",
      names: [],
      sources: ["C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\users\\mocks\\usersService.mock.ts"],
      sourcesContent: ["export class UsersServiceMock {\r\n\r\n  getAllUsers(): void { }\r\n\r\n  deleteUser(): void { }\r\n\r\n  addUser(): void { }\r\n\r\n  getUser(): void{ }\r\n\r\n  editUser(): void{ }\r\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1d9be2a8846d1ff3b828b898263c5902424b24be"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_71df2r5et = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_71df2r5et();
cov_71df2r5et().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_71df2r5et().s[1]++;
exports.UsersServiceMock = void 0;
class UsersServiceMock {
  getAllUsers() {
    /* istanbul ignore next */
    cov_71df2r5et().f[0]++;
  }
  deleteUser() {
    /* istanbul ignore next */
    cov_71df2r5et().f[1]++;
  }
  addUser() {
    /* istanbul ignore next */
    cov_71df2r5et().f[2]++;
  }
  getUser() {
    /* istanbul ignore next */
    cov_71df2r5et().f[3]++;
  }
  editUser() {
    /* istanbul ignore next */
    cov_71df2r5et().f[4]++;
  }
}
/* istanbul ignore next */
cov_71df2r5et().s[2]++;
exports.UsersServiceMock = UsersServiceMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVc2Vyc1NlcnZpY2VNb2NrIiwiZ2V0QWxsVXNlcnMiLCJjb3ZfNzFkZjJyNWV0IiwiZiIsImRlbGV0ZVVzZXIiLCJhZGRVc2VyIiwiZ2V0VXNlciIsImVkaXRVc2VyIiwicyIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVzdWFyaW9cXHJlcG9zKERlc2Fycm9sbG8pXFxUUC1kc3ctZnJvbnRcXHNyY1xcYXBwXFx1c2Vyc1xcbW9ja3NcXHVzZXJzU2VydmljZS5tb2NrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBVc2Vyc1NlcnZpY2VNb2NrIHtcclxuXHJcbiAgZ2V0QWxsVXNlcnMoKTogdm9pZCB7IH1cclxuXHJcbiAgZGVsZXRlVXNlcigpOiB2b2lkIHsgfVxyXG5cclxuICBhZGRVc2VyKCk6IHZvaWQgeyB9XHJcblxyXG4gIGdldFVzZXIoKTogdm9pZHsgfVxyXG5cclxuICBlZGl0VXNlcigpOiB2b2lkeyB9XHJcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE1BQWFBLGdCQUFnQjtFQUUzQkMsV0FBV0EsQ0FBQTtJQUFBO0lBQUFDLGFBQUEsR0FBQUMsQ0FBQTtFQUFXO0VBRXRCQyxVQUFVQSxDQUFBO0lBQUE7SUFBQUYsYUFBQSxHQUFBQyxDQUFBO0VBQVc7RUFFckJFLE9BQU9BLENBQUE7SUFBQTtJQUFBSCxhQUFBLEdBQUFDLENBQUE7RUFBVztFQUVsQkcsT0FBT0EsQ0FBQTtJQUFBO0lBQUFKLGFBQUEsR0FBQUMsQ0FBQTtFQUFVO0VBRWpCSSxRQUFRQSxDQUFBO0lBQUE7SUFBQUwsYUFBQSxHQUFBQyxDQUFBO0VBQVU7O0FBQ25CO0FBQUFELGFBQUEsR0FBQU0sQ0FBQTtBQVhEQyxPQUFBLENBQUFULGdCQUFBLEdBQUFBLGdCQUFBIn0=