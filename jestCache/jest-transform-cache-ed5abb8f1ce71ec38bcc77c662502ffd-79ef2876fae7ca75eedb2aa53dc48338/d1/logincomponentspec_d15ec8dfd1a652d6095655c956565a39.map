{"file":"C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\log-in\\log-in.component.spec.ts","mappings":";;AAAA,mDAAkF;AAClF,0CAAqD,CAAC,iCAAiC;AAEvF,yDAAoD;AACpD,sDAAiD;AACjD,kEAAwF;AACxF,+BAA0B;AAC1B,qDAA8D;AAC9D,iEAA6D;AAE7D,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,SAAyB,CAAC;IAC9B,IAAI,OAAyC,CAAC;IAE9C,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,YAAY,EAAE,CAAC,iCAAc,CAAC;YAC9B,OAAO,EAAE,CAAC,2BAAmB,EAAE,6BAAmB,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,kCAAe,EAAE,CAAC,CAAC,CAAC;YAChH,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,6BAAY,EAAE,QAAQ,EAAE,oCAAgB,EAAE;aACtD;SACF,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACvB,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,iCAAc,CAAC,CAAC;QAClD,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACtC,OAAO,CAAC,aAAa,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QACvB,MAAM,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,IAAA,mBAAS,EAAC,GAAG,EAAE;QACrC,MAAM,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,6BAAY,CAAC,CAAC;QAC/C,MAAM,MAAM,GAA6B;YACvC,KAAK,EAAE,sLAAsL;YAC7L,IAAI,EAAE;gBACJ,MAAM,EAAE,CAAC;gBACT,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE,QAAQ;gBAClB,KAAK,EAAE,kBAAkB;gBACzB,KAAK,EAAE,UAAU;gBACjB,SAAS,EAAE,QAAQ;gBACnB,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,YAAY;gBACpB,IAAI,EAAE,CAAC;aACR;SACF,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,eAAe,CAAC,IAAA,SAAE,EAAC,MAAM,CAAC,CAAC,CAAC;QAC7E,MAAM,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC;QAC5C,SAAS,CAAC,cAAc,EAAE,CAAC;QAC3B,2FAA2F;QAC3F,IAAA,cAAI,GAAE,CAAC;QACP,mEAAmE;QACnE,OAAO,CAAC,aAAa,EAAE,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnD,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Usuario\\repos(Desarrollo)\\TP-dsw-front\\src\\app\\log-in\\log-in.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, fakeAsync, tick} from '@angular/core/testing';\r\nimport { ReactiveFormsModule } from '@angular/forms'; // Import the ReactiveFormsModule\r\n\r\nimport { LogInComponent } from './log-in.component';\r\nimport { LogInService } from '../log-in.service';\r\nimport { LogInServiceMock, LogInServiceResponseMock } from '../mocks/logInService.mock';\r\nimport { of } from 'rxjs';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { InicioComponent } from '../inicio/inicio.component';\r\n\r\ndescribe('LogInComponent', () => {\r\n  let component: LogInComponent;\r\n  let fixture: ComponentFixture<LogInComponent>;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [LogInComponent],\r\n      imports: [ReactiveFormsModule, RouterTestingModule.withRoutes([{ path: 'inicio', component: InicioComponent }])], \r\n      providers: [\r\n        { provide: LogInService, useClass: LogInServiceMock },\r\n      ],\r\n    }).compileComponents();\r\n    fixture = TestBed.createComponent(LogInComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should get one user', fakeAsync(() => {\r\n      const service = TestBed.inject(LogInService);\r\n    const result: LogInServiceResponseMock = {\r\n      token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxMjMxMjMiLCJpYXQiOjE3MDI2NDQ3NTYsImV4cCI6MTcwMjY0NTM1Nn0.PrN2IoCzK0MaK4OqbgND6UxYK_vHxUdOClVxYBPXgwI\",\r\n      user: {\r\n        idUser: 1,\r\n        userName: \"prueba\",\r\n        password: \"prueba\",\r\n        email: \"prueba@gmail.com\",\r\n        phone: \"00000000\",\r\n        firstName: \"prueba\",\r\n        lastName: \"prueba\",\r\n        adress: \"prueba 123\",\r\n        type: 0\r\n      }\r\n    };\r\n    const spyGetUser = jest.spyOn(service, \"getOne\").mockReturnValue(of(result));\r\n    const component = fixture.componentInstance;\r\n    component.getOneEmployee();\r\n    // Use tick to simulate the passage of time until all asynchronous operations are completed\r\n    tick();\r\n    // Detect changes after the tick to ensure the component is updated\r\n    fixture.detectChanges();\r\n    expect(component.user?.userName).toEqual(\"prueba\");\r\n    expect(component.user?.password).toEqual(\"prueba\");\r\n  }));\r\n});"],"version":3}