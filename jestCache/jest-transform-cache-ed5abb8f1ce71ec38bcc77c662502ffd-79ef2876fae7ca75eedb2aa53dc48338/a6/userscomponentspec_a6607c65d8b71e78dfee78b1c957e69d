daf083a3d91d2113e54bb9ad4df84ca9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const users_component_1 = require("./users.component");
const users_service_1 = require("../users.service");
const users_service_mock_1 = require("../mocks/users.service.mock");
const accordion_1 = require("ngx-bootstrap/accordion");
const rxjs_1 = require("rxjs");
const user_1 = require("../models/user");
describe('UsersComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [users_component_1.UsersComponent, accordion_1.AccordionComponent],
            imports: [],
            providers: [
                { provide: users_service_1.UsersService, useClass: users_service_mock_1.userServiceMock }
            ]
        });
        fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
    it('should get all users', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const result = [
            {
                id_usuario: 1,
                nombre_usuario: "prueba",
                contrase単a: "prueba",
                nombre: "prueba",
                apellido: "prueba",
                email: "prueba",
                telefono: "00000000",
                direccion: "prueba",
                tipo_usuario: 0
            },
            {
                id_usuario: 2,
                nombre_usuario: "prueba2",
                contrase単a: "prueba2",
                nombre: "prueba2",
                apellido: "prueba2",
                email: "prueba2",
                telefono: "11111111",
                direccion: "prueba2",
                tipo_usuario: 1
            }
        ];
        const spyGetUser = jest.spyOn(service, "getAllUsers").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getAllUsers();
        expect(component.list.length).toBeGreaterThan(0);
        expect(component.list[0]?.userName).toBeDefined();
    });
    it('should get only clients', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const result = [
            {
                id_usuario: 1,
                nombre_usuario: "cliente",
                contrase単a: "cliente",
                nombre: "cliente",
                apellido: "cliente",
                email: "cliente",
                telefono: "00000000",
                direccion: "cliente",
                tipo_usuario: 0 // 0 es el numero correspondiente a los clientes
            }
        ];
        const spyGetUser = jest.spyOn(service, "getAllUsers").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getAllClients();
        expect(component.list.length).toBeGreaterThan(0);
        expect(component.list[0]?.type).toEqual(0);
    });
    it('should get only employees', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const result = [
            {
                id_usuario: 1,
                nombre_usuario: "empleado",
                contrase単a: "empleado",
                nombre: "empleado",
                apellido: "empleado",
                email: "empleado",
                telefono: "11111111",
                direccion: "empleado",
                tipo_usuario: 1 // 1 es el numero correspondiente a los empleados
            }
        ];
        const spyGetUser = jest.spyOn(service, "getAllUsers").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getAllEmployees();
        expect(component.list.length).toBeGreaterThan(0);
        expect(component.list[0]?.type).toEqual(1);
    });
    it('should set showClientsFlag to true', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const component = fixture.componentInstance;
        component.showOnlyClients();
        fixture.detectChanges();
        expect(component.showClientsFlag).toEqual(true);
        expect(component.showEmployeesFlag).toEqual(false);
    });
    it('should set showClientsFlag to false', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const component = fixture.componentInstance;
        component.showClientsFlag = true;
        component.showOnlyClients();
        fixture.detectChanges();
        expect(component.showClientsFlag).toEqual(false);
    });
    it('should set showEmployeesFlag to true', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const component = fixture.componentInstance;
        component.showOnlyEmployees();
        fixture.detectChanges();
        expect(component.showEmployeesFlag).toEqual(true);
        expect(component.showClientsFlag).toEqual(false);
    });
    it('should set showEmployeesFlag to false', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const component = fixture.componentInstance;
        component.showEmployeesFlag = true;
        component.showOnlyEmployees();
        fixture.detectChanges();
        expect(component.showEmployeesFlag).toEqual(false);
    });
    it('should allow to edit a user', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const component = fixture.componentInstance;
        const userToEditMock = { userName: "prueba", password: "prueba",
            email: "prueba", phone: "prueba", firstName: "prueba", lastName: "prueba",
            adress: "prueba", idUser: 1, type: 1 };
        component.allowEditing(userToEditMock);
        expect(component.edit).toEqual(true);
        expect(component.userForm.controls.username).toBeDefined();
        expect(component.userForm.enabled).toEqual(true);
    });
    it('should delete a user', async () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const userToDelete = new user_1.User(-1, "prueba", "prueba", "prueba", "prueba", "prueba 123", "00000000", 1, "prueba@gmail.com");
        const component = fixture.componentInstance;
        const ngOnInitSpy = jest.spyOn(component, 'ngOnInit');
        component.list.push(userToDelete);
        await component.deleteUser(userToDelete);
        component.ngOnInit();
        expect(component.list.find(user => user.idUser === -1)).toBeUndefined();
        component.ngOnInit();
        expect(ngOnInitSpy).toHaveBeenCalled();
    });
    it('should edit a user', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const component = fixture.componentInstance;
        const userToEdit = new user_1.User(-1, "prueba", "prueba", "prueba", "prueba", "prueba 123", "00000000", 1, "prueba@gmail.com");
        component.allowEditing(userToEdit);
        component.userForm.controls.username.setValue("modificado");
        component.editUser();
        expect(component.lastEditedUser?.userName).toEqual("modificado");
    });
    it('should create a user', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const component = fixture.componentInstance;
        component.userForm.patchValue({ username: "prueba", password: "prueba", email: "prueba", phoneNumber: "00000000", firstName: "prueba", lastName: "prueba", address: "prueba 123", userType: "1" });
        component.addUser();
        expect(component.lastUserAdded?.userName).toEqual("prueba");
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVc3VhcmlvXFxyZXBvcyhEZXNhcnJvbGxvKVxcVFAtZHN3LWZyb250XFxzcmNcXGFwcFxcdXNlcnNcXHVzZXJzLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWtGO0FBRWxGLHVEQUFtRDtBQUNuRCxvREFBZ0Q7QUFDaEQsb0VBQTZFO0FBQzdFLHVEQUE2RDtBQUM3RCwrQkFBMEI7QUFDMUIseUNBQXNDO0FBRXRDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsSUFBSSxTQUF5QixDQUFDO0lBQzlCLElBQUksT0FBeUMsQ0FBQztJQUU5QyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUM3QixZQUFZLEVBQUUsQ0FBQyxnQ0FBYyxFQUFFLDhCQUFrQixDQUFDO1lBQ2xELE9BQU8sRUFBRSxFQUFFO1lBQ1gsU0FBUyxFQUFFO2dCQUNULEVBQUMsT0FBTyxFQUFFLDRCQUFZLEVBQUUsUUFBUSxFQUFFLG9DQUFlLEVBQUM7YUFDbkQ7U0FDRixDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsZ0NBQWMsQ0FBQyxDQUFDO1FBQ2xELFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDdEMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDdkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtRQUM5QixNQUFNLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxnQ0FBYyxDQUFDLENBQUM7UUFDeEQsTUFBTSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsNEJBQVksQ0FBQyxDQUFDO1FBQzdD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VFAtZHN3LWZyb250XFxzcmNcXGFwcFxcdXNlcnNcXHVzZXJzLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGZha2VBc3luYywgdGlja30gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcclxuXHJcbmltcG9ydCB7IFVzZXJzQ29tcG9uZW50IH0gZnJvbSAnLi91c2Vycy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBVc2Vyc1NlcnZpY2UgfSBmcm9tICcuLi91c2Vycy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgdXNlclNlcnZpY2VNb2NrLCB1c2Vyc1Jlc3BvbnNlIH0gZnJvbSAnLi4vbW9ja3MvdXNlcnMuc2VydmljZS5tb2NrJztcclxuaW1wb3J0IHsgQWNjb3JkaW9uQ29tcG9uZW50IH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9hY2NvcmRpb24nO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXInO1xyXG5cclxuZGVzY3JpYmUoJ1VzZXJzQ29tcG9uZW50JywgKCkgPT4ge1xyXG4gIGxldCBjb21wb25lbnQ6IFVzZXJzQ29tcG9uZW50O1xyXG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPFVzZXJzQ29tcG9uZW50PjtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xyXG4gICAgICBkZWNsYXJhdGlvbnM6IFtVc2Vyc0NvbXBvbmVudCwgQWNjb3JkaW9uQ29tcG9uZW50XSxcclxuICAgICAgaW1wb3J0czogW10sXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHtwcm92aWRlOiBVc2Vyc1NlcnZpY2UsIHVzZUNsYXNzOiB1c2VyU2VydmljZU1vY2t9XHJcbiAgICAgIF1cclxuICAgIH0pO1xyXG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFVzZXJzQ29tcG9uZW50KTtcclxuICAgIGNvbXBvbmVudCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QoY29tcG9uZW50KS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgZ2V0IGFsbCB1c2VycycsICgpID0+IHtcclxuICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChVc2Vyc0NvbXBvbmVudCk7XHJcbiAgICBjb25zdCBzZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoVXNlcnNTZXJ2aWNlKTtcclxuICAgIGNvbnN0IHJlc3VsdDogYW55W10gPSAgIFtcclxuICAgICAge1xyXG4gICAgICAgIGlkX3VzdWFyaW86IDEsXHJcbiAgICAgICAgbm9tYnJlX3VzdWFyaW86IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgY29udHJhc2XDsWE6IFwicHJ1ZWJhXCIsXHJcbiAgICAgICAgbm9tYnJlOiBcInBydWViYVwiLFxyXG4gICAgICAgIGFwZWxsaWRvOiBcInBydWViYVwiLFxyXG4gICAgICAgIGVtYWlsOiBcInBydWViYVwiLFxyXG4gICAgICAgIHRlbGVmb25vOiBcIjAwMDAwMDAwXCIsXHJcbiAgICAgICAgZGlyZWNjaW9uOiBcInBydWViYVwiLFxyXG4gICAgICAgIHRpcG9fdXN1YXJpbzogMFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaWRfdXN1YXJpbzogMixcclxuICAgICAgICBub21icmVfdXN1YXJpbzogXCJwcnVlYmEyXCIsXHJcbiAgICAgICAgY29udHJhc2XDsWE6IFwicHJ1ZWJhMlwiLFxyXG4gICAgICAgIG5vbWJyZTogXCJwcnVlYmEyXCIsXHJcbiAgICAgICAgYXBlbGxpZG86IFwicHJ1ZWJhMlwiLFxyXG4gICAgICAgIGVtYWlsOiBcInBydWViYTJcIixcclxuICAgICAgICB0ZWxlZm9ubzogXCIxMTExMTExMVwiLFxyXG4gICAgICAgIGRpcmVjY2lvbjogXCJwcnVlYmEyXCIsXHJcbiAgICAgICAgdGlwb191c3VhcmlvOiAxXHJcbiAgICAgIH1cclxuICAgIF07XHJcbiAgICBjb25zdCBzcHlHZXRVc2VyID0gamVzdC5zcHlPbihzZXJ2aWNlLCBcImdldEFsbFVzZXJzXCIpLm1vY2tSZXR1cm5WYWx1ZShvZihyZXN1bHQpKTtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICBjb21wb25lbnQuZ2V0QWxsVXNlcnMoKTtcclxuICAgIGV4cGVjdChjb21wb25lbnQubGlzdC5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKVxyXG4gICAgZXhwZWN0KGNvbXBvbmVudC5saXN0WzBdPy51c2VyTmFtZSkudG9CZURlZmluZWQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBnZXQgb25seSBjbGllbnRzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFVzZXJzQ29tcG9uZW50KTtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBUZXN0QmVkLmluamVjdChVc2Vyc1NlcnZpY2UpO1xyXG4gICAgY29uc3QgcmVzdWx0OiBhbnlbXSA9ICAgW1xyXG4gICAgICB7XHJcbiAgICAgICAgaWRfdXN1YXJpbzogMSxcclxuICAgICAgICBub21icmVfdXN1YXJpbzogXCJjbGllbnRlXCIsXHJcbiAgICAgICAgY29udHJhc2XDsWE6IFwiY2xpZW50ZVwiLFxyXG4gICAgICAgIG5vbWJyZTogXCJjbGllbnRlXCIsXHJcbiAgICAgICAgYXBlbGxpZG86IFwiY2xpZW50ZVwiLFxyXG4gICAgICAgIGVtYWlsOiBcImNsaWVudGVcIixcclxuICAgICAgICB0ZWxlZm9ubzogXCIwMDAwMDAwMFwiLFxyXG4gICAgICAgIGRpcmVjY2lvbjogXCJjbGllbnRlXCIsXHJcbiAgICAgICAgdGlwb191c3VhcmlvOiAwIC8vIDAgZXMgZWwgbnVtZXJvIGNvcnJlc3BvbmRpZW50ZSBhIGxvcyBjbGllbnRlc1xyXG4gICAgICB9XHJcbiAgICBdO1xyXG4gICAgY29uc3Qgc3B5R2V0VXNlciA9IGplc3Quc3B5T24oc2VydmljZSwgXCJnZXRBbGxVc2Vyc1wiKS5tb2NrUmV0dXJuVmFsdWUob2YocmVzdWx0KSk7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgY29tcG9uZW50LmdldEFsbENsaWVudHMoKTtcclxuICAgIGV4cGVjdChjb21wb25lbnQubGlzdC5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxuICAgIGV4cGVjdChjb21wb25lbnQubGlzdFswXT8udHlwZSkudG9FcXVhbCgwKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBnZXQgb25seSBlbXBsb3llZXMnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoVXNlcnNDb21wb25lbnQpO1xyXG4gICAgY29uc3Qgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KFVzZXJzU2VydmljZSk7XHJcbiAgICBjb25zdCByZXN1bHQ6IGFueVtdID0gICBbXHJcbiAgICAgIHtcclxuICAgICAgICBpZF91c3VhcmlvOiAxLFxyXG4gICAgICAgIG5vbWJyZV91c3VhcmlvOiBcImVtcGxlYWRvXCIsXHJcbiAgICAgICAgY29udHJhc2XDsWE6IFwiZW1wbGVhZG9cIixcclxuICAgICAgICBub21icmU6IFwiZW1wbGVhZG9cIixcclxuICAgICAgICBhcGVsbGlkbzogXCJlbXBsZWFkb1wiLFxyXG4gICAgICAgIGVtYWlsOiBcImVtcGxlYWRvXCIsXHJcbiAgICAgICAgdGVsZWZvbm86IFwiMTExMTExMTFcIixcclxuICAgICAgICBkaXJlY2Npb246IFwiZW1wbGVhZG9cIixcclxuICAgICAgICB0aXBvX3VzdWFyaW86IDEgLy8gMSBlcyBlbCBudW1lcm8gY29ycmVzcG9uZGllbnRlIGEgbG9zIGVtcGxlYWRvc1xyXG4gICAgICB9XHJcbiAgICBdO1xyXG4gICAgY29uc3Qgc3B5R2V0VXNlciA9IGplc3Quc3B5T24oc2VydmljZSwgXCJnZXRBbGxVc2Vyc1wiKS5tb2NrUmV0dXJuVmFsdWUob2YocmVzdWx0KSk7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgY29tcG9uZW50LmdldEFsbEVtcGxveWVlcygpO1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC5saXN0Lmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC5saXN0WzBdPy50eXBlKS50b0VxdWFsKDEpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHNldCBzaG93Q2xpZW50c0ZsYWcgdG8gdHJ1ZScsICgpID0+IHtcclxuICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChVc2Vyc0NvbXBvbmVudCk7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgY29tcG9uZW50LnNob3dPbmx5Q2xpZW50cygpO1xyXG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LnNob3dDbGllbnRzRmxhZykudG9FcXVhbCh0cnVlKSA7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LnNob3dFbXBsb3llZXNGbGFnKS50b0VxdWFsKGZhbHNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBzZXQgc2hvd0NsaWVudHNGbGFnIHRvIGZhbHNlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFVzZXJzQ29tcG9uZW50KTtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICBjb21wb25lbnQuc2hvd0NsaWVudHNGbGFnID0gdHJ1ZTtcclxuICAgIGNvbXBvbmVudC5zaG93T25seUNsaWVudHMoKTtcclxuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC5zaG93Q2xpZW50c0ZsYWcpLnRvRXF1YWwoZmFsc2UpIDtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBzZXQgc2hvd0VtcGxveWVlc0ZsYWcgdG8gdHJ1ZScsICgpID0+IHtcclxuICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChVc2Vyc0NvbXBvbmVudCk7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgY29tcG9uZW50LnNob3dPbmx5RW1wbG95ZWVzKCk7XHJcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcclxuICAgIGV4cGVjdChjb21wb25lbnQuc2hvd0VtcGxveWVlc0ZsYWcpLnRvRXF1YWwodHJ1ZSk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LnNob3dDbGllbnRzRmxhZykudG9FcXVhbChmYWxzZSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgc2V0IHNob3dFbXBsb3llZXNGbGFnIHRvIGZhbHNlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFVzZXJzQ29tcG9uZW50KTtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICBjb21wb25lbnQuc2hvd0VtcGxveWVlc0ZsYWcgPSB0cnVlO1xyXG4gICAgY29tcG9uZW50LnNob3dPbmx5RW1wbG95ZWVzKCk7XHJcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcclxuICAgIGV4cGVjdChjb21wb25lbnQuc2hvd0VtcGxveWVlc0ZsYWcpLnRvRXF1YWwoZmFsc2UpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGFsbG93IHRvIGVkaXQgYSB1c2VyJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFVzZXJzQ29tcG9uZW50KTtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICBjb25zdCB1c2VyVG9FZGl0TW9jazogVXNlciA9IHt1c2VyTmFtZTogXCJwcnVlYmFcIiwgcGFzc3dvcmQ6IFwicHJ1ZWJhXCIsIFxyXG4gICAgICBlbWFpbDogXCJwcnVlYmFcIiwgcGhvbmU6IFwicHJ1ZWJhXCIsIGZpcnN0TmFtZTogXCJwcnVlYmFcIiwgbGFzdE5hbWU6IFwicHJ1ZWJhXCIsXHJcbiAgICAgIGFkcmVzczogXCJwcnVlYmFcIiwgaWRVc2VyOiAxLCB0eXBlOiAxfVxyXG4gICAgY29tcG9uZW50LmFsbG93RWRpdGluZyh1c2VyVG9FZGl0TW9jayk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LmVkaXQpLnRvRXF1YWwodHJ1ZSk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LnVzZXJGb3JtLmNvbnRyb2xzLnVzZXJuYW1lKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC51c2VyRm9ybS5lbmFibGVkKS50b0VxdWFsKHRydWUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGRlbGV0ZSBhIHVzZXInLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoVXNlcnNDb21wb25lbnQpO1xyXG4gICAgY29uc3Qgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KFVzZXJzU2VydmljZSk7XHJcbiAgICBjb25zdCB1c2VyVG9EZWxldGU6IFVzZXIgPSBuZXcgVXNlcigtMSwgXCJwcnVlYmFcIiwgXCJwcnVlYmFcIiwgXCJwcnVlYmFcIiwgXCJwcnVlYmFcIiwgXCJwcnVlYmEgMTIzXCIsIFwiMDAwMDAwMDBcIiwgMSwgXCJwcnVlYmFAZ21haWwuY29tXCIpO1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcclxuICAgIGNvbnN0IG5nT25Jbml0U3B5ID0gamVzdC5zcHlPbihjb21wb25lbnQsICduZ09uSW5pdCcpO1xyXG4gICAgY29tcG9uZW50Lmxpc3QucHVzaCh1c2VyVG9EZWxldGUpO1xyXG4gICAgYXdhaXQgY29tcG9uZW50LmRlbGV0ZVVzZXIodXNlclRvRGVsZXRlKTtcclxuICAgIGNvbXBvbmVudC5uZ09uSW5pdCgpO1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC5saXN0LmZpbmQodXNlciA9PiB1c2VyLmlkVXNlciA9PT0gLTEpKS50b0JlVW5kZWZpbmVkKCk7XHJcbiAgICBjb21wb25lbnQubmdPbkluaXQoKTtcclxuICAgIGV4cGVjdChuZ09uSW5pdFNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGVkaXQgYSB1c2VyJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFVzZXJzQ29tcG9uZW50KTtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBUZXN0QmVkLmluamVjdChVc2Vyc1NlcnZpY2UpO1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcclxuICAgIGNvbnN0IHVzZXJUb0VkaXQ6IFVzZXIgPSBuZXcgVXNlcigtMSwgXCJwcnVlYmFcIiwgXCJwcnVlYmFcIiwgXCJwcnVlYmFcIiwgXCJwcnVlYmFcIiwgXCJwcnVlYmEgMTIzXCIsIFwiMDAwMDAwMDBcIiwgMSwgXCJwcnVlYmFAZ21haWwuY29tXCIpO1xyXG4gICAgY29tcG9uZW50LmFsbG93RWRpdGluZyh1c2VyVG9FZGl0KTtcclxuICAgIGNvbXBvbmVudC51c2VyRm9ybS5jb250cm9scy51c2VybmFtZS5zZXRWYWx1ZShcIm1vZGlmaWNhZG9cIik7XHJcbiAgICBjb21wb25lbnQuZWRpdFVzZXIoKTtcclxuICAgIGV4cGVjdChjb21wb25lbnQubGFzdEVkaXRlZFVzZXI/LnVzZXJOYW1lKS50b0VxdWFsKFwibW9kaWZpY2Fkb1wiKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYSB1c2VyJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KFVzZXJzQ29tcG9uZW50KTtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBUZXN0QmVkLmluamVjdChVc2Vyc1NlcnZpY2UpO1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcclxuICAgIGNvbXBvbmVudC51c2VyRm9ybS5wYXRjaFZhbHVlKHt1c2VybmFtZTogXCJwcnVlYmFcIiwgcGFzc3dvcmQ6IFwicHJ1ZWJhXCIsIGVtYWlsOiBcInBydWViYVwiLCBwaG9uZU51bWJlcjogXCIwMDAwMDAwMFwiLCBmaXJzdE5hbWU6IFwicHJ1ZWJhXCIsIGxhc3ROYW1lOiBcInBydWViYVwiLCBhZGRyZXNzOiBcInBydWViYSAxMjNcIiwgdXNlclR5cGU6IFwiMVwifSk7XHJcbiAgICBjb21wb25lbnQuYWRkVXNlcigpO1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC5sYXN0VXNlckFkZGVkPy51c2VyTmFtZSkudG9FcXVhbChcInBydWViYVwiKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==