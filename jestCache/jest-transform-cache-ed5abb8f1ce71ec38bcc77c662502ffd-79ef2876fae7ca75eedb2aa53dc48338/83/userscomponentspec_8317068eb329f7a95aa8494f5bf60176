74ff9f2b73379804196752cbeb9bac32
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const users_component_1 = require("./users.component");
const users_service_1 = require("../users.service");
const users_service_mock_1 = require("../mocks/users.service.mock");
const accordion_1 = require("ngx-bootstrap/accordion");
const rxjs_1 = require("rxjs");
describe('UsersComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [users_component_1.UsersComponent, accordion_1.AccordionComponent],
            imports: [],
            providers: [
                { provide: users_service_1.UsersService, useClass: users_service_mock_1.userServiceMock }
            ]
        });
        fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
    it('should get all users', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const result = [
            {
                id_usuario: 1,
                nombre_usuario: "prueba",
                contrase単a: "prueba",
                nombre: "prueba",
                apellido: "prueba",
                email: "prueba",
                telefono: "00000000",
                direccion: "prueba",
                tipo_usuario: 0
            },
            {
                id_usuario: 2,
                nombre_usuario: "prueba2",
                contrase単a: "prueba2",
                nombre: "prueba2",
                apellido: "prueba2",
                email: "prueba2",
                telefono: "11111111",
                direccion: "prueba2",
                tipo_usuario: 1
            }
        ];
        const spyGetUser = jest.spyOn(service, "getAllUsers").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getAllUsers();
        console.log(component.list);
        expect(component.list.length).toBeGreaterThan(0);
        expect(component.list[0]?.userName).toBeDefined();
    });
    it('should get only clients', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const result = [
            {
                id_usuario: 1,
                nombre_usuario: "cliente",
                contrase単a: "cliente",
                nombre: "cliente",
                apellido: "cliente",
                email: "cliente",
                telefono: "00000000",
                direccion: "cliente",
                tipo_usuario: 0 // 0 es el numero correspondiente a los clientes
            }
        ];
        const spyGetUser = jest.spyOn(service, "getAllUsers").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getAllClients();
        expect(component.list.length).toBeGreaterThan(0);
        expect(component.list[0]?.type).toEqual(0);
    });
    it('should get only employees', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const service = testing_1.TestBed.inject(users_service_1.UsersService);
        const result = [
            {
                id_usuario: 1,
                nombre_usuario: "empleado",
                contrase単a: "empleado",
                nombre: "empleado",
                apellido: "empleado",
                email: "empleado",
                telefono: "11111111",
                direccion: "empleado",
                tipo_usuario: 1 // 1 es el numero correspondiente a los empleados
            }
        ];
        const spyGetUser = jest.spyOn(service, "getAllUsers").mockReturnValue((0, rxjs_1.of)(result));
        const component = fixture.componentInstance;
        component.getAllEmployees();
        expect(component.list.length).toBeGreaterThan(0);
        expect(component.list[0]?.type).toEqual(1);
    });
    it('should set showClientsFlag to true', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const component = fixture.componentInstance;
        component.showClientsFlag = false;
        component.showOnlyClients();
        fixture.detectChanges();
        expect(component.showClientsFlag).toEqual(true);
        expect(component.showEmployeesFlag).toEqual(false);
    });
    it('should set showEmployeesFlag to true', () => {
        const fixture = testing_1.TestBed.createComponent(users_component_1.UsersComponent);
        const component = fixture.componentInstance;
        component.showClientsFlag = false;
        component.showOnlyEmployees();
        fixture.detectChanges();
        expect(component.showEmployeesFlag).toEqual(true);
        expect(component.showClientsFlag).toEqual(false);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,